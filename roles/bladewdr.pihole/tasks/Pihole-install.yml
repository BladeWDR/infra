- name: Create the Pi-hole config directory.
  ansible.builtin.file:
    path: "/etc/pihole"
    owner: pihole
    group: pihole
    mode: '0755'
    state: directory

- name: Create the temp directory.
  ansible.builtin.file:
    path: "{{ pihole_temp_dir }}"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Download the Pi-hole FTL binary.
  ansible.builtin.get_url:
    url: "{{ pihole_ftl_download_url }}"
    dest: "{{ pihole_temp_dir }}/{{ pihole_ftl_binary_name }}"
    checksum: "sha1:{{ pihole_ftl_download_url }}.sha1"
    mode: '0755'

- name: Populate service facts.
  ansible.builtin.service_facts:

# I don't care about any systems not using systemd right now, so I'm just going to assume that everything is using it.
# Maybe I'll support other init systems in the future but it's not a priority.

- name: Stop pihole-FTL service if it exists.
  ansible.builtin.service:
    state: stopped
    name: pihole-FTL.service
  when: ansible_facts['services']['pihole-FTL.service']['status'] | default('not-found') != 'not-found'

- name: Move the pihole-FTL binary to its final location.
  ansible.builtin.copy:
    src: "{{ pihole_temp_dir }}/{{ pihole_ftl_binary_name }}"
    dest: "/usr/bin/pihole-FTL"
    remote_src: true
    owner: root
    group: root
    mode: '0755'

# Only run these when an install var is set?
- name: Clone the pihole git repository.
  ansible.builtin.git:
    repo: "{{ pihole_git_url }}"
    dest: "{{ pihole_local_repo }}"
    single_branch: true
    version: master

- name: Clone the pihole web git repository.
  ansible.builtin.git:
    repo: "{{ pihole_web_git_url }}"
    dest: "{{ pihole_web_interface_dir }}"
    single_branch: true
    version: master

- name: Copy gravity.sh into place.
  ansible.builtin.copy:
    remote_src: true
    owner: root
    group: root
    mode: '0755'
    src: "{{ pihole_local_repo }}/gravity.sh"
    dest: "{{ pihole_install_dir }}/gravity.sh"

- name: Copy advanced scripts into place.
  ansible.builtin.copy:
    remote_src: true
    owner: root
    group: root
    mode: '0755'
    src: "{{ pihole_local_repo }}/gravity.sh"
    dest: "{{ pihole_install_dir }}/gravity.sh"

- name: Copy gravity.sh into place.
  ansible.builtin.copy:
    remote_src: true
    owner: root
    group: root
    mode: '0755'
    src: "{{ pihole_local_repo }}/gravity.sh"
    dest: "{{ pihole_install_dir }}/gravity.sh"

- name: Copy advanced scripts.
  ansible.builtin.copy:
    remote_src: true
    owner: root
    group: root
    mode: '0755'
    src: "{{ pihole_local_repo }}/advanced/Scripts/{{ item }}.sh"
    dest: "{{ pihole_install_dir }}/{{ item }}.sh"
  loop: "{{ pihole_advanced_scripts }}"

- name: Copy COL_TABLE into place.
  ansible.builtin.copy:
    remote_src: true
    owner: root
    group: root
    mode: '0755'
    src: "{{ pihole_local_repo }}/advanced/Scripts/COL_TABLE"
    dest: "{{ pihole_install_dir }}/COL_TABLE"

- name: Copy main pihole script.
  ansible.builtin.copy:
    remote_src: true
    owner: root
    group: root
    mode: '0755'
    src: "{{ pihole_local_repo }}/pihole"
    dest: "{{ pihole_bin_dir }}/pihole"

- name: Make sure that bash-completion.d directory exists.
  ansible.builtin.file:
    path: "/etc/bash-completion.d"
    state: directory
    owner: root
    group: root
    mode: '0644'

- name: Copy pihole bash completions.
  ansible.builtin.copy:
    remote_src: true
    owner: root
    group: root
    mode: '0755'
    src: "{{ pihole_local_repo }}/advanced/bash-completion/pihole"
    dest: "/etc/bash-completion.d/pihole"

- name: Copy pihole-FTL systemd unit.
  ansible.builtin.copy:
    remote_src: true
    owner: root
    group: root
    mode: '0755'
    src: "{{ pihole_local_repo }}/advanced/Templates/pihole-FTL.systemd"
    dest: "/etc/systemd/system/pihole-FTL.service"
  notify: pihole-FTL

  # Do i need to manually call daemon-reload here?

- name: Copy pihole-FTL scripts.
  ansible.builtin.copy:
    remote_src: true
    owner: root
    group: root
    mode: '0755'
    src: "{{ pihole_local_repo }}/{{ item }}"
    dest: "{{ pihole_install_dir }}/{{ item }}"
  loop: "{{ pihole_FTL_scripts }}"

- name: Check if a custom hosts file exists.
  ansible.builtin.stat:
    path: "{{ pihole_install_dir }}/hosts/custom.list"
  register: hosts_file_exist

- name: Create the custom hosts file.
  ansible.builtin.file:
    path: "{{ pihole_install_dir }}/hosts/custom.list"
    owner: pihole
    group: pihole
    mode: '0660'
    state: file
  when: not (hosts_file_exist.stat.exists and hosts_file_exist.stat.isfile)

- name: Check that manpage directories exist.
  ansible.builtin.stat:
    path: "{{ item }}"
  register: manpage_dirs_stat
  loop: "{{ pihole_manpage_dirs }}"

- name: If the manpage directories don't exist, create them.
  ansible.builtin.file:
    state: directory
    mode: '0755'
    owner: root
    group: root
    path: "{{ item.item }}"
  loop: "{{ manpage_dirs_stat.results }}"
  when: not item.stat.exists
  register: manpages_copied

- name: Copy the manpage files.
  ansible.builtin.copy:
    remote_src: true
    src: "{{ pihole_local_repo }}/manpages/pihole.8"
    dest: "/usr/local/share/man/man8/pihole.8"
    owner: root
    group: root
    mode: '0755'
  when: manpages_copied.changed

- name: Check that the logrotate script exists.
  ansible.builtin.stat:
    path: "{{ pihole_config_dir }}/logrotate"
  register: logrotate_exists

- name: Copy over the logrotate script.
  ansible.builtin.copy:
    remote_src: true
    owner: root
    group: root
    mode: '0644'
    src: "{{ pihole_local_repo }}/advanced/Templates/logrotate"
    dest: "{{ pihole_config_dir }}/logrotate"
  when: not logrotate_exists.stat.exists

- name: Check that the cron file exists.
  ansible.builtin.stat:
    path: "/etc/cron.d/pihole"
  register: cron_exists

- name: Copy over the cron file.
  ansible.builtin.copy:
    remote_src: true
    owner: root
    group: root
    mode: '0644'
    src: "{{ pihole_local_repo }}/advanced/Templates/pihole.cron"
    dest: "/etc/cron.d/pihole"
  when: not cron_exists.stat.exists

# Assume that we need to run gravity if if we needed to create /etc/pihole, so regenerate the hosts list.
- name: Run gravity to generate the hosts list.
  ansible.builtin.shell: |
    sudo -u pihole bash /opt/pihole/gravity.sh --force

- name: Reset the Pi-hole password to 'password'.
  ansible.builtin.shell: |
    pihole setpassword "{{ pihole_default_password }}"

- name: Clean up temp directory.
  ansible.builtin.file:
    path: "{{ pihole_temp_dir }}"
    state: absent
