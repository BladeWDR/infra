#!/usr/bin/env bash

OPT_WARNING=93600
OPT_CRITICAL=187200

# Exit codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3

_performance_data() {
	echo "| \
last_ago=$DIFF \
warning=$OPT_WARNING \
critical=$OPT_CRITICAL"
}

# Log file check

LOG_FILE='/var/log/unattended-upgrades/unattended-upgrades.log'

if ! test -f $LOG_FILE ; then
	echo "CRITICAL - The log file ($LOG_FILE) doesn't exist or you haven't sufficient read permissions."
	exit $STATE_CRITICAL
fi

LOG_TEXT="$(cat $LOG_FILE)"

if [ -z "$LOG_TEXT" ]; then
	LATEST_COMPRESSED_LOG=$(ls -r ${LOG_FILE}.*.gz | tail -n 1)
	LOG_TEXT="$(zcat $LATEST_COMPRESSED_LOG)"
fi

while IFS= read -r line; do
    if [ ! -z "$(echo "$line" | grep -E ' (WARNING|ERROR) ')" ]; then
        # added -s check because it returns error on an empty file
        if [ ! -z "$(echo "$line" | grep ' ERROR ')" ]; then
            printf "CRITICAL - In the log file is an ERROR message.\n${line}"
            exit $STATE_CRITICAL
        fi

        # added -s check because it returns error on an empty file
        if [ ! -z "$(echo "$line" | grep ' WARNING ')" ]; then
            printf "WARNING - In the log file is a WARNING message.\n${line}"
            exit $STATE_WARNING
        fi
    fi
done < <(printf $LOG_TEXT | tail -n "+$(echo $LOG_TEXT | grep -n 'Starting unattended upgrades script' | tail -n1 | cut -d: -f1)")

LAST_LOG_LINE=$(echo "$LOG_TEXT" | grep -v ' WARNING ' | grep -v ' ERROR ' | tail -n 1)

LAST_RUN_DATE=$(echo $LAST_LOG_LINE | cut -d "," -f 1)

if [ -z "$LAST_RUN_DATE" ]; then
	echo "CRITICAL - The date on which the command \
'unattended-upgrades' ran for the last time, could not be determined. \
The log file '$LOG_FILE' is empty."
	exit $STATE_CRITICAL
fi

LAST_RUN=$(date +%s -d "$LAST_RUN_DATE")
CURRENT=$(date +%s)
DIFF=$((CURRENT - LAST_RUN))

MESSAGE="- The last execution of 'unattended-upgrades' was at \
$LAST_RUN_DATE. $(_performance_data)"

# Critical
if [ "$DIFF" -ge "$OPT_CRITICAL" ]; then
	echo "CRITICAL $MESSAGE"
	exit $STATE_CRITICAL
# Warning
elif [ "$DIFF" -ge "$OPT_WARNING" ]; then
	echo "WARNING $MESSAGE"
	exit $STATE_WARNING
# ok
elif [ "$DIFF" -lt "$OPT_WARNING" ]; then
	echo "OK $MESSAGE"
	exit $STATE_OK
else
	echo "UNKOWN $MESSAGE"
	exit $STATE_UNKNOWN
fi
